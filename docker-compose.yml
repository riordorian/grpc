version: '3.9'

services:
#  alpine:
#    build:
#      context: .
#      dockerfile: ".docker/telnet/Dockerfile"
#    tty: true
  grpc:
    container_name: "grpc"
    build:
      context: .
      dockerfile: ".docker/grpc/Dockerfile"
    ports:
      - "50051:50051"
    volumes:
      - .:/app
  db:
    image: postgres:latest
    restart: always
    env_file: .env
    ports:
      - "5432:5432"
    volumes:
      - .volumes/db:/var/lib/postgresql/data
  minio:
    image: quay.io/minio/minio
    command: server /data --console-address ":9090"
    restart: always
    ports:
      - "9000:9000"
      - "9090:9090"
    volumes:
      - .volumes/minio/data:/data
    environment:
      - MINIO_ROOT_USER=admin
      - MINIO_ROOT_PASSWORD=Secure123$
  envoy:
    build:
      context: .
      dockerfile: ".docker/envoy/Dockerfile"
    ports:
      - "8000:8000"
      - "9901:9901"
    volumes:
        - ./envoy.yaml:/etc/envoy/envoy.yaml
  keycloak:
    image: quay.io/keycloak/keycloak
    container_name: keycloak
    command:
      - start-dev
      - --import-realm
    env_file: .env
    restart: unless-stopped
    environment:
      - KEYCLOAK_ADMIN=grpc
      - KEYCLOAK_ADMIN_PASSWORD=grpc
    ports:
      - "8082:8080"
    volumes:
      - .volumes/keycloak/:/opt/keycloak/data/
  elasticsearch:
    image: elasticsearch:8.13.4
    volumes:
      - .docker/elasticsearch/config.yml:/usr/share/elasticsearch/config/elasticsearch.yml
      - .volumes/elasticsearch/data:/usr/share/elasticsearch/data/
    environment:
      ES_JAVA_OPTS: "-Xmx512m -Xms512m"
      ELASTIC_USERNAME: "elastic"
      ELASTIC_PASSWORD: "MyPw123"
      discovery.type: single-node
    networks:
      - elk
    ports:
      - "9200:9200"
      - "9300:9300"
  kibana:
    image: kibana:8.13.4
    depends_on:
      - elasticsearch
    volumes:
      - .docker/kibana/config.yml:/usr/share/kibana/config/kibana.yml
    networks:
      - elk
    ports:
      - "5601:5601"
#  krakend:
#    image: devopsfaith/krakend:watch
#    volumes:
#      - ".docker/krakend/:/etc/krakend"
#    ports:
#      - "8080:8080"
#    command: [ "run", "-dc", "krakend.json" ]

networks:
  elk:
    driver: bridge
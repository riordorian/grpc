// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"
	news "grpc/internal/domain/news"

	mock "github.com/stretchr/testify/mock"

	structures "grpc/internal/shared/structures"
)

// GetListHandlerInterface is an autogenerated mock type for the GetListHandlerInterface type
type GetListHandlerInterface struct {
	mock.Mock
}

type GetListHandlerInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *GetListHandlerInterface) EXPECT() *GetListHandlerInterface_Expecter {
	return &GetListHandlerInterface_Expecter{mock: &_m.Mock}
}

// Handle provides a mock function with given fields: ctx, req
func (_m *GetListHandlerInterface) Handle(ctx context.Context, req structures.ListRequest) ([]news.New, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Handle")
	}

	var r0 []news.New
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, structures.ListRequest) ([]news.New, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, structures.ListRequest) []news.New); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]news.New)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, structures.ListRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetListHandlerInterface_Handle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Handle'
type GetListHandlerInterface_Handle_Call struct {
	*mock.Call
}

// Handle is a helper method to define mock.On call
//   - ctx context.Context
//   - req structures.ListRequest
func (_e *GetListHandlerInterface_Expecter) Handle(ctx interface{}, req interface{}) *GetListHandlerInterface_Handle_Call {
	return &GetListHandlerInterface_Handle_Call{Call: _e.mock.On("Handle", ctx, req)}
}

func (_c *GetListHandlerInterface_Handle_Call) Run(run func(ctx context.Context, req structures.ListRequest)) *GetListHandlerInterface_Handle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(structures.ListRequest))
	})
	return _c
}

func (_c *GetListHandlerInterface_Handle_Call) Return(_a0 []news.New, _a1 error) *GetListHandlerInterface_Handle_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GetListHandlerInterface_Handle_Call) RunAndReturn(run func(context.Context, structures.ListRequest) ([]news.New, error)) *GetListHandlerInterface_Handle_Call {
	_c.Call.Return(run)
	return _c
}

// NewGetListHandlerInterface creates a new instance of GetListHandlerInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGetListHandlerInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *GetListHandlerInterface {
	mock := &GetListHandlerInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

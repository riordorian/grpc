// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"
	uuid "github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
	"grpc/internal/domain/news"
	"grpc/internal/shared/dto"
)

// RepositoryInterface is an autogenerated mock type for the RepositoryInterface type
type RepositoryInterface struct {
	mock.Mock
}

type RepositoryInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *RepositoryInterface) EXPECT() *RepositoryInterface_Expecter {
	return &RepositoryInterface_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: id
func (_m *RepositoryInterface) Delete(id uuid.UUID) (bool, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (bool, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RepositoryInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type RepositoryInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - id uuid.UUID
func (_e *RepositoryInterface_Expecter) Delete(id interface{}) *RepositoryInterface_Delete_Call {
	return &RepositoryInterface_Delete_Call{Call: _e.mock.On("Delete", id)}
}

func (_c *RepositoryInterface_Delete_Call) Run(run func(id uuid.UUID)) *RepositoryInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *RepositoryInterface_Delete_Call) Return(_a0 bool, _a1 error) *RepositoryInterface_Delete_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RepositoryInterface_Delete_Call) RunAndReturn(run func(uuid.UUID) (bool, error)) *RepositoryInterface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetById provides a mock function with given fields: id
func (_m *RepositoryInterface) GetById(id uuid.UUID) (news.New, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 news.New
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (news.New, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) news.New); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(news.New)
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RepositoryInterface_GetById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetById'
type RepositoryInterface_GetById_Call struct {
	*mock.Call
}

// GetById is a helper method to define mock.On call
//   - id uuid.UUID
func (_e *RepositoryInterface_Expecter) GetById(id interface{}) *RepositoryInterface_GetById_Call {
	return &RepositoryInterface_GetById_Call{Call: _e.mock.On("GetById", id)}
}

func (_c *RepositoryInterface_GetById_Call) Run(run func(id uuid.UUID)) *RepositoryInterface_GetById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *RepositoryInterface_GetById_Call) Return(_a0 news.New, _a1 error) *RepositoryInterface_GetById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RepositoryInterface_GetById_Call) RunAndReturn(run func(uuid.UUID) (news.New, error)) *RepositoryInterface_GetById_Call {
	_c.Call.Return(run)
	return _c
}

// GetList provides a mock function with given fields: ctx, request
func (_m *RepositoryInterface) GetList(ctx context.Context, request dto.ListRequest) ([]news.New, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetList")
	}

	var r0 []news.New
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.ListRequest) ([]news.New, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.ListRequest) []news.New); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]news.New)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.ListRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RepositoryInterface_GetList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetList'
type RepositoryInterface_GetList_Call struct {
	*mock.Call
}

// GetList is a helper method to define mock.On call
//   - ctx context.Context
//   - request dto.ListRequest
func (_e *RepositoryInterface_Expecter) GetList(ctx interface{}, request interface{}) *RepositoryInterface_GetList_Call {
	return &RepositoryInterface_GetList_Call{Call: _e.mock.On("GetList", ctx, request)}
}

func (_c *RepositoryInterface_GetList_Call) Run(run func(ctx context.Context, request dto.ListRequest)) *RepositoryInterface_GetList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dto.ListRequest))
	})
	return _c
}

func (_c *RepositoryInterface_GetList_Call) Return(_a0 []news.New, _a1 error) *RepositoryInterface_GetList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RepositoryInterface_GetList_Call) RunAndReturn(run func(context.Context, dto.ListRequest) ([]news.New, error)) *RepositoryInterface_GetList_Call {
	_c.Call.Return(run)
	return _c
}

// Insert provides a mock function with given fields: ctx, fields
func (_m *RepositoryInterface) Insert(ctx context.Context, fields news.New) (uuid.UUID, error) {
	ret := _m.Called(ctx, fields)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, news.New) (uuid.UUID, error)); ok {
		return rf(ctx, fields)
	}
	if rf, ok := ret.Get(0).(func(context.Context, news.New) uuid.UUID); ok {
		r0 = rf(ctx, fields)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, news.New) error); ok {
		r1 = rf(ctx, fields)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RepositoryInterface_Insert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Insert'
type RepositoryInterface_Insert_Call struct {
	*mock.Call
}

// Insert is a helper method to define mock.On call
//   - ctx context.Context
//   - fields news.New
func (_e *RepositoryInterface_Expecter) Insert(ctx interface{}, fields interface{}) *RepositoryInterface_Insert_Call {
	return &RepositoryInterface_Insert_Call{Call: _e.mock.On("Insert", ctx, fields)}
}

func (_c *RepositoryInterface_Insert_Call) Run(run func(ctx context.Context, fields news.New)) *RepositoryInterface_Insert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(news.New))
	})
	return _c
}

func (_c *RepositoryInterface_Insert_Call) Return(id uuid.UUID, err error) *RepositoryInterface_Insert_Call {
	_c.Call.Return(id, err)
	return _c
}

func (_c *RepositoryInterface_Insert_Call) RunAndReturn(run func(context.Context, news.New) (uuid.UUID, error)) *RepositoryInterface_Insert_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: id, fields
func (_m *RepositoryInterface) Update(id uuid.UUID, fields news.New) (bool, error) {
	ret := _m.Called(id, fields)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, news.New) (bool, error)); ok {
		return rf(id, fields)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID, news.New) bool); ok {
		r0 = rf(id, fields)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID, news.New) error); ok {
		r1 = rf(id, fields)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RepositoryInterface_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type RepositoryInterface_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - id uuid.UUID
//   - fields news.New
func (_e *RepositoryInterface_Expecter) Update(id interface{}, fields interface{}) *RepositoryInterface_Update_Call {
	return &RepositoryInterface_Update_Call{Call: _e.mock.On("Update", id, fields)}
}

func (_c *RepositoryInterface_Update_Call) Run(run func(id uuid.UUID, fields news.New)) *RepositoryInterface_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(news.New))
	})
	return _c
}

func (_c *RepositoryInterface_Update_Call) Return(_a0 bool, _a1 error) *RepositoryInterface_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RepositoryInterface_Update_Call) RunAndReturn(run func(uuid.UUID, news.New) (bool, error)) *RepositoryInterface_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewRepositoryInterface creates a new instance of RepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *RepositoryInterface {
	mock := &RepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

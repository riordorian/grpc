// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"
	grpc "grpc/internal/infrastructure/ports/grpc/proto_gen/grpc"

	mock "github.com/stretchr/testify/mock"
)

// PromosServer is an autogenerated mock type for the PromosServer type
type PromosServer struct {
	mock.Mock
}

type PromosServer_Expecter struct {
	mock *mock.Mock
}

func (_m *PromosServer) EXPECT() *PromosServer_Expecter {
	return &PromosServer_Expecter{mock: &_m.Mock}
}

// PromoInfo provides a mock function with given fields: _a0, _a1
func (_m *PromosServer) PromoInfo(_a0 context.Context, _a1 *grpc.PromoInfoRequest) (*grpc.Promo, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for PromoInfo")
	}

	var r0 *grpc.Promo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.PromoInfoRequest) (*grpc.Promo, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.PromoInfoRequest) *grpc.Promo); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.Promo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *grpc.PromoInfoRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PromosServer_PromoInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PromoInfo'
type PromosServer_PromoInfo_Call struct {
	*mock.Call
}

// PromoInfo is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *grpc.PromoInfoRequest
func (_e *PromosServer_Expecter) PromoInfo(_a0 interface{}, _a1 interface{}) *PromosServer_PromoInfo_Call {
	return &PromosServer_PromoInfo_Call{Call: _e.mock.On("PromoInfo", _a0, _a1)}
}

func (_c *PromosServer_PromoInfo_Call) Run(run func(_a0 context.Context, _a1 *grpc.PromoInfoRequest)) *PromosServer_PromoInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*grpc.PromoInfoRequest))
	})
	return _c
}

func (_c *PromosServer_PromoInfo_Call) Return(_a0 *grpc.Promo, _a1 error) *PromosServer_PromoInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PromosServer_PromoInfo_Call) RunAndReturn(run func(context.Context, *grpc.PromoInfoRequest) (*grpc.Promo, error)) *PromosServer_PromoInfo_Call {
	_c.Call.Return(run)
	return _c
}

// PromoList provides a mock function with given fields: _a0, _a1
func (_m *PromosServer) PromoList(_a0 context.Context, _a1 *grpc.PromoListRequest) (*grpc.PromosList, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for PromoList")
	}

	var r0 *grpc.PromosList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.PromoListRequest) (*grpc.PromosList, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.PromoListRequest) *grpc.PromosList); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.PromosList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *grpc.PromoListRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PromosServer_PromoList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PromoList'
type PromosServer_PromoList_Call struct {
	*mock.Call
}

// PromoList is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *grpc.PromoListRequest
func (_e *PromosServer_Expecter) PromoList(_a0 interface{}, _a1 interface{}) *PromosServer_PromoList_Call {
	return &PromosServer_PromoList_Call{Call: _e.mock.On("PromoList", _a0, _a1)}
}

func (_c *PromosServer_PromoList_Call) Run(run func(_a0 context.Context, _a1 *grpc.PromoListRequest)) *PromosServer_PromoList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*grpc.PromoListRequest))
	})
	return _c
}

func (_c *PromosServer_PromoList_Call) Return(_a0 *grpc.PromosList, _a1 error) *PromosServer_PromoList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PromosServer_PromoList_Call) RunAndReturn(run func(context.Context, *grpc.PromoListRequest) (*grpc.PromosList, error)) *PromosServer_PromoList_Call {
	_c.Call.Return(run)
	return _c
}

// mustEmbedUnimplementedPromosServer provides a mock function with given fields:
func (_m *PromosServer) mustEmbedUnimplementedPromosServer() {
	_m.Called()
}

// PromosServer_mustEmbedUnimplementedPromosServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'mustEmbedUnimplementedPromosServer'
type PromosServer_mustEmbedUnimplementedPromosServer_Call struct {
	*mock.Call
}

// mustEmbedUnimplementedPromosServer is a helper method to define mock.On call
func (_e *PromosServer_Expecter) mustEmbedUnimplementedPromosServer() *PromosServer_mustEmbedUnimplementedPromosServer_Call {
	return &PromosServer_mustEmbedUnimplementedPromosServer_Call{Call: _e.mock.On("mustEmbedUnimplementedPromosServer")}
}

func (_c *PromosServer_mustEmbedUnimplementedPromosServer_Call) Run(run func()) *PromosServer_mustEmbedUnimplementedPromosServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *PromosServer_mustEmbedUnimplementedPromosServer_Call) Return() *PromosServer_mustEmbedUnimplementedPromosServer_Call {
	_c.Call.Return()
	return _c
}

func (_c *PromosServer_mustEmbedUnimplementedPromosServer_Call) RunAndReturn(run func()) *PromosServer_mustEmbedUnimplementedPromosServer_Call {
	_c.Call.Return(run)
	return _c
}

// NewPromosServer creates a new instance of PromosServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPromosServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *PromosServer {
	mock := &PromosServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

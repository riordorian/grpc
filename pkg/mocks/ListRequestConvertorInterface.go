// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	"grpc/pkg/proto_gen/grpc"

	mock "github.com/stretchr/testify/mock"

	structures "grpc/internal/shared/structures"
)

// ListRequestConvertorInterface is an autogenerated mock type for the ListRequestConvertorInterface type
type ListRequestConvertorInterface struct {
	mock.Mock
}

type ListRequestConvertorInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *ListRequestConvertorInterface) EXPECT() *ListRequestConvertorInterface_Expecter {
	return &ListRequestConvertorInterface_Expecter{mock: &_m.Mock}
}

// Convert provides a mock function with given fields: _a0
func (_m *ListRequestConvertorInterface) Convert(_a0 *grpc.ListRequest) (structures.ListRequest, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Convert")
	}

	var r0 structures.ListRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(*grpc.ListRequest) (structures.ListRequest, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*grpc.ListRequest) structures.ListRequest); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(structures.ListRequest)
	}

	if rf, ok := ret.Get(1).(func(*grpc.ListRequest) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRequestConvertorInterface_Convert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Convert'
type ListRequestConvertorInterface_Convert_Call struct {
	*mock.Call
}

// Convert is a helper method to define mock.On call
//   - _a0 *grpc.ListRequest
func (_e *ListRequestConvertorInterface_Expecter) Convert(_a0 interface{}) *ListRequestConvertorInterface_Convert_Call {
	return &ListRequestConvertorInterface_Convert_Call{Call: _e.mock.On("Convert", _a0)}
}

func (_c *ListRequestConvertorInterface_Convert_Call) Run(run func(_a0 *grpc.ListRequest)) *ListRequestConvertorInterface_Convert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*grpc.ListRequest))
	})
	return _c
}

func (_c *ListRequestConvertorInterface_Convert_Call) Return(_a0 structures.ListRequest, _a1 error) *ListRequestConvertorInterface_Convert_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ListRequestConvertorInterface_Convert_Call) RunAndReturn(run func(*grpc.ListRequest) (structures.ListRequest, error)) *ListRequestConvertorInterface_Convert_Call {
	_c.Call.Return(run)
	return _c
}

// NewListRequestConvertorInterface creates a new instance of ListRequestConvertorInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewListRequestConvertorInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ListRequestConvertorInterface {
	mock := &ListRequestConvertorInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	"grpc/pkg/proto_gen/grpc"

	jwt "github.com/golang-jwt/jwt"

	mock "github.com/stretchr/testify/mock"
)

// UserLoginResponseConvertorInterface is an autogenerated mock type for the UserLoginResponseConvertorInterface type
type UserLoginResponseConvertorInterface struct {
	mock.Mock
}

type UserLoginResponseConvertorInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *UserLoginResponseConvertorInterface) EXPECT() *UserLoginResponseConvertorInterface_Expecter {
	return &UserLoginResponseConvertorInterface_Expecter{mock: &_m.Mock}
}

// Convert provides a mock function with given fields: token
func (_m *UserLoginResponseConvertorInterface) Convert(token jwt.Token) (*grpc.UserLoginResponse, error) {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for Convert")
	}

	var r0 *grpc.UserLoginResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(jwt.Token) (*grpc.UserLoginResponse, error)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(jwt.Token) *grpc.UserLoginResponse); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.UserLoginResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(jwt.Token) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserLoginResponseConvertorInterface_Convert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Convert'
type UserLoginResponseConvertorInterface_Convert_Call struct {
	*mock.Call
}

// Convert is a helper method to define mock.On call
//   - token jwt.Token
func (_e *UserLoginResponseConvertorInterface_Expecter) Convert(token interface{}) *UserLoginResponseConvertorInterface_Convert_Call {
	return &UserLoginResponseConvertorInterface_Convert_Call{Call: _e.mock.On("Convert", token)}
}

func (_c *UserLoginResponseConvertorInterface_Convert_Call) Run(run func(token jwt.Token)) *UserLoginResponseConvertorInterface_Convert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(jwt.Token))
	})
	return _c
}

func (_c *UserLoginResponseConvertorInterface_Convert_Call) Return(_a0 *grpc.UserLoginResponse, _a1 error) *UserLoginResponseConvertorInterface_Convert_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserLoginResponseConvertorInterface_Convert_Call) RunAndReturn(run func(jwt.Token) (*grpc.UserLoginResponse, error)) *UserLoginResponseConvertorInterface_Convert_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserLoginResponseConvertorInterface creates a new instance of UserLoginResponseConvertorInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserLoginResponseConvertorInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserLoginResponseConvertorInterface {
	mock := &UserLoginResponseConvertorInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

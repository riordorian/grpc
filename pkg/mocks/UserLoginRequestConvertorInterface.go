// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	"grpc/internal/infrastructure/adapters/auth"
	"grpc/pkg/proto_gen/grpc"

	mock "github.com/stretchr/testify/mock"
)

// UserLoginRequestConvertorInterface is an autogenerated mock type for the UserLoginRequestConvertorInterface type
type UserLoginRequestConvertorInterface struct {
	mock.Mock
}

type UserLoginRequestConvertorInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *UserLoginRequestConvertorInterface) EXPECT() *UserLoginRequestConvertorInterface_Expecter {
	return &UserLoginRequestConvertorInterface_Expecter{mock: &_m.Mock}
}

// Convert provides a mock function with given fields: request
func (_m *UserLoginRequestConvertorInterface) Convert(request *grpc.UserLoginRequest) (auth.LoginRequest, error) {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for Convert")
	}

	var r0 auth.LoginRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(*grpc.UserLoginRequest) (auth.LoginRequest, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(*grpc.UserLoginRequest) auth.LoginRequest); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Get(0).(auth.LoginRequest)
	}

	if rf, ok := ret.Get(1).(func(*grpc.UserLoginRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserLoginRequestConvertorInterface_Convert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Convert'
type UserLoginRequestConvertorInterface_Convert_Call struct {
	*mock.Call
}

// Convert is a helper method to define mock.On call
//   - request *grpc.UserLoginRequest
func (_e *UserLoginRequestConvertorInterface_Expecter) Convert(request interface{}) *UserLoginRequestConvertorInterface_Convert_Call {
	return &UserLoginRequestConvertorInterface_Convert_Call{Call: _e.mock.On("Convert", request)}
}

func (_c *UserLoginRequestConvertorInterface_Convert_Call) Run(run func(request *grpc.UserLoginRequest)) *UserLoginRequestConvertorInterface_Convert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*grpc.UserLoginRequest))
	})
	return _c
}

func (_c *UserLoginRequestConvertorInterface_Convert_Call) Return(_a0 auth.LoginRequest, _a1 error) *UserLoginRequestConvertorInterface_Convert_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserLoginRequestConvertorInterface_Convert_Call) RunAndReturn(run func(*grpc.UserLoginRequest) (auth.LoginRequest, error)) *UserLoginRequestConvertorInterface_Convert_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserLoginRequestConvertorInterface creates a new instance of UserLoginRequestConvertorInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserLoginRequestConvertorInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserLoginRequestConvertorInterface {
	mock := &UserLoginRequestConvertorInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

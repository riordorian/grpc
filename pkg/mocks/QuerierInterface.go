// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	sql "database/sql"

	sqlx "github.com/jmoiron/sqlx"
)

// QuerierInterface is an autogenerated mock type for the QuerierInterface type
type QuerierInterface struct {
	mock.Mock
}

type QuerierInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *QuerierInterface) EXPECT() *QuerierInterface_Expecter {
	return &QuerierInterface_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: dest, query, args
func (_m *QuerierInterface) Get(dest interface{}, query string, args ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, dest, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, string, ...interface{}) error); ok {
		r0 = rf(dest, query, args...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// QuerierInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type QuerierInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - dest interface{}
//   - query string
//   - args ...interface{}
func (_e *QuerierInterface_Expecter) Get(dest interface{}, query interface{}, args ...interface{}) *QuerierInterface_Get_Call {
	return &QuerierInterface_Get_Call{Call: _e.mock.On("Get",
		append([]interface{}{dest, query}, args...)...)}
}

func (_c *QuerierInterface_Get_Call) Run(run func(dest interface{}, query string, args ...interface{})) *QuerierInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(interface{}), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *QuerierInterface_Get_Call) Return(_a0 error) *QuerierInterface_Get_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *QuerierInterface_Get_Call) RunAndReturn(run func(interface{}, string, ...interface{}) error) *QuerierInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// NamedExec provides a mock function with given fields: query, arg
func (_m *QuerierInterface) NamedExec(query string, arg interface{}) (sql.Result, error) {
	ret := _m.Called(query, arg)

	if len(ret) == 0 {
		panic("no return value specified for NamedExec")
	}

	var r0 sql.Result
	var r1 error
	if rf, ok := ret.Get(0).(func(string, interface{}) (sql.Result, error)); ok {
		return rf(query, arg)
	}
	if rf, ok := ret.Get(0).(func(string, interface{}) sql.Result); ok {
		r0 = rf(query, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sql.Result)
		}
	}

	if rf, ok := ret.Get(1).(func(string, interface{}) error); ok {
		r1 = rf(query, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QuerierInterface_NamedExec_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NamedExec'
type QuerierInterface_NamedExec_Call struct {
	*mock.Call
}

// NamedExec is a helper method to define mock.On call
//   - query string
//   - arg interface{}
func (_e *QuerierInterface_Expecter) NamedExec(query interface{}, arg interface{}) *QuerierInterface_NamedExec_Call {
	return &QuerierInterface_NamedExec_Call{Call: _e.mock.On("NamedExec", query, arg)}
}

func (_c *QuerierInterface_NamedExec_Call) Run(run func(query string, arg interface{})) *QuerierInterface_NamedExec_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(interface{}))
	})
	return _c
}

func (_c *QuerierInterface_NamedExec_Call) Return(_a0 sql.Result, _a1 error) *QuerierInterface_NamedExec_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *QuerierInterface_NamedExec_Call) RunAndReturn(run func(string, interface{}) (sql.Result, error)) *QuerierInterface_NamedExec_Call {
	_c.Call.Return(run)
	return _c
}

// NamedQuery provides a mock function with given fields: query, arg
func (_m *QuerierInterface) NamedQuery(query string, arg interface{}) (*sqlx.Rows, error) {
	ret := _m.Called(query, arg)

	if len(ret) == 0 {
		panic("no return value specified for NamedQuery")
	}

	var r0 *sqlx.Rows
	var r1 error
	if rf, ok := ret.Get(0).(func(string, interface{}) (*sqlx.Rows, error)); ok {
		return rf(query, arg)
	}
	if rf, ok := ret.Get(0).(func(string, interface{}) *sqlx.Rows); ok {
		r0 = rf(query, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sqlx.Rows)
		}
	}

	if rf, ok := ret.Get(1).(func(string, interface{}) error); ok {
		r1 = rf(query, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QuerierInterface_NamedQuery_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NamedQuery'
type QuerierInterface_NamedQuery_Call struct {
	*mock.Call
}

// NamedQuery is a helper method to define mock.On call
//   - query string
//   - arg interface{}
func (_e *QuerierInterface_Expecter) NamedQuery(query interface{}, arg interface{}) *QuerierInterface_NamedQuery_Call {
	return &QuerierInterface_NamedQuery_Call{Call: _e.mock.On("NamedQuery", query, arg)}
}

func (_c *QuerierInterface_NamedQuery_Call) Run(run func(query string, arg interface{})) *QuerierInterface_NamedQuery_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(interface{}))
	})
	return _c
}

func (_c *QuerierInterface_NamedQuery_Call) Return(_a0 *sqlx.Rows, _a1 error) *QuerierInterface_NamedQuery_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *QuerierInterface_NamedQuery_Call) RunAndReturn(run func(string, interface{}) (*sqlx.Rows, error)) *QuerierInterface_NamedQuery_Call {
	_c.Call.Return(run)
	return _c
}

// QueryRowx provides a mock function with given fields: query, args
func (_m *QuerierInterface) QueryRowx(query string, args ...interface{}) *sqlx.Row {
	var _ca []interface{}
	_ca = append(_ca, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for QueryRowx")
	}

	var r0 *sqlx.Row
	if rf, ok := ret.Get(0).(func(string, ...interface{}) *sqlx.Row); ok {
		r0 = rf(query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sqlx.Row)
		}
	}

	return r0
}

// QuerierInterface_QueryRowx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryRowx'
type QuerierInterface_QueryRowx_Call struct {
	*mock.Call
}

// QueryRowx is a helper method to define mock.On call
//   - query string
//   - args ...interface{}
func (_e *QuerierInterface_Expecter) QueryRowx(query interface{}, args ...interface{}) *QuerierInterface_QueryRowx_Call {
	return &QuerierInterface_QueryRowx_Call{Call: _e.mock.On("QueryRowx",
		append([]interface{}{query}, args...)...)}
}

func (_c *QuerierInterface_QueryRowx_Call) Run(run func(query string, args ...interface{})) *QuerierInterface_QueryRowx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *QuerierInterface_QueryRowx_Call) Return(_a0 *sqlx.Row) *QuerierInterface_QueryRowx_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *QuerierInterface_QueryRowx_Call) RunAndReturn(run func(string, ...interface{}) *sqlx.Row) *QuerierInterface_QueryRowx_Call {
	_c.Call.Return(run)
	return _c
}

// Queryx provides a mock function with given fields: query, args
func (_m *QuerierInterface) Queryx(query string, args ...interface{}) (*sqlx.Rows, error) {
	var _ca []interface{}
	_ca = append(_ca, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Queryx")
	}

	var r0 *sqlx.Rows
	var r1 error
	if rf, ok := ret.Get(0).(func(string, ...interface{}) (*sqlx.Rows, error)); ok {
		return rf(query, args...)
	}
	if rf, ok := ret.Get(0).(func(string, ...interface{}) *sqlx.Rows); ok {
		r0 = rf(query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sqlx.Rows)
		}
	}

	if rf, ok := ret.Get(1).(func(string, ...interface{}) error); ok {
		r1 = rf(query, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QuerierInterface_Queryx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Queryx'
type QuerierInterface_Queryx_Call struct {
	*mock.Call
}

// Queryx is a helper method to define mock.On call
//   - query string
//   - args ...interface{}
func (_e *QuerierInterface_Expecter) Queryx(query interface{}, args ...interface{}) *QuerierInterface_Queryx_Call {
	return &QuerierInterface_Queryx_Call{Call: _e.mock.On("Queryx",
		append([]interface{}{query}, args...)...)}
}

func (_c *QuerierInterface_Queryx_Call) Run(run func(query string, args ...interface{})) *QuerierInterface_Queryx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *QuerierInterface_Queryx_Call) Return(_a0 *sqlx.Rows, _a1 error) *QuerierInterface_Queryx_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *QuerierInterface_Queryx_Call) RunAndReturn(run func(string, ...interface{}) (*sqlx.Rows, error)) *QuerierInterface_Queryx_Call {
	_c.Call.Return(run)
	return _c
}

// Select provides a mock function with given fields: dest, query, args
func (_m *QuerierInterface) Select(dest interface{}, query string, args ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, dest, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Select")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, string, ...interface{}) error); ok {
		r0 = rf(dest, query, args...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// QuerierInterface_Select_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Select'
type QuerierInterface_Select_Call struct {
	*mock.Call
}

// Select is a helper method to define mock.On call
//   - dest interface{}
//   - query string
//   - args ...interface{}
func (_e *QuerierInterface_Expecter) Select(dest interface{}, query interface{}, args ...interface{}) *QuerierInterface_Select_Call {
	return &QuerierInterface_Select_Call{Call: _e.mock.On("Select",
		append([]interface{}{dest, query}, args...)...)}
}

func (_c *QuerierInterface_Select_Call) Run(run func(dest interface{}, query string, args ...interface{})) *QuerierInterface_Select_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(interface{}), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *QuerierInterface_Select_Call) Return(_a0 error) *QuerierInterface_Select_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *QuerierInterface_Select_Call) RunAndReturn(run func(interface{}, string, ...interface{}) error) *QuerierInterface_Select_Call {
	_c.Call.Return(run)
	return _c
}

// NewQuerierInterface creates a new instance of QuerierInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewQuerierInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *QuerierInterface {
	mock := &QuerierInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"
	"grpc/pkg/proto_gen/grpc"

	google_golang_orggrpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// NewsClient is an autogenerated mock type for the NewsClient type
type NewsClient struct {
	mock.Mock
}

type NewsClient_Expecter struct {
	mock *mock.Mock
}

func (_m *NewsClient) EXPECT() *NewsClient_Expecter {
	return &NewsClient_Expecter{mock: &_m.Mock}
}

// List provides a mock function with given fields: ctx, in, opts
func (_m *NewsClient) List(ctx context.Context, in *grpc.ListRequest, opts ...google_golang_orggrpc.CallOption) (*grpc.NewsList, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *grpc.NewsList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.ListRequest, ...google_golang_orggrpc.CallOption) (*grpc.NewsList, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.ListRequest, ...google_golang_orggrpc.CallOption) *grpc.NewsList); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.NewsList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *grpc.ListRequest, ...google_golang_orggrpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewsClient_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type NewsClient_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - in *grpc.ListRequest
//   - opts ...google_golang_orggrpc.CallOption
func (_e *NewsClient_Expecter) List(ctx interface{}, in interface{}, opts ...interface{}) *NewsClient_List_Call {
	return &NewsClient_List_Call{Call: _e.mock.On("List",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *NewsClient_List_Call) Run(run func(ctx context.Context, in *grpc.ListRequest, opts ...google_golang_orggrpc.CallOption)) *NewsClient_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]google_golang_orggrpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(google_golang_orggrpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*grpc.ListRequest), variadicArgs...)
	})
	return _c
}

func (_c *NewsClient_List_Call) Return(_a0 *grpc.NewsList, _a1 error) *NewsClient_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NewsClient_List_Call) RunAndReturn(run func(context.Context, *grpc.ListRequest, ...google_golang_orggrpc.CallOption) (*grpc.NewsList, error)) *NewsClient_List_Call {
	_c.Call.Return(run)
	return _c
}

// NewNewsClient creates a new instance of NewsClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNewsClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *NewsClient {
	mock := &NewsClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

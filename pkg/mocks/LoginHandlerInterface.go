// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"
	jwt "github.com/golang-jwt/jwt"
	"grpc/internal/infrastructure/adapters/auth"

	mock "github.com/stretchr/testify/mock"
)

// LoginHandlerInterface is an autogenerated mock type for the LoginHandlerInterface type
type LoginHandlerInterface struct {
	mock.Mock
}

type LoginHandlerInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *LoginHandlerInterface) EXPECT() *LoginHandlerInterface_Expecter {
	return &LoginHandlerInterface_Expecter{mock: &_m.Mock}
}

// Handle provides a mock function with given fields: ctx, req
func (_m *LoginHandlerInterface) Handle(ctx context.Context, req auth.LoginRequest) (jwt.Token, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Handle")
	}

	var r0 jwt.Token
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, auth.LoginRequest) (jwt.Token, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, auth.LoginRequest) jwt.Token); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(jwt.Token)
	}

	if rf, ok := ret.Get(1).(func(context.Context, auth.LoginRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoginHandlerInterface_Handle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Handle'
type LoginHandlerInterface_Handle_Call struct {
	*mock.Call
}

// Handle is a helper method to define mock.On call
//   - ctx context.Context
//   - req auth.LoginRequest
func (_e *LoginHandlerInterface_Expecter) Handle(ctx interface{}, req interface{}) *LoginHandlerInterface_Handle_Call {
	return &LoginHandlerInterface_Handle_Call{Call: _e.mock.On("Handle", ctx, req)}
}

func (_c *LoginHandlerInterface_Handle_Call) Run(run func(ctx context.Context, req auth.LoginRequest)) *LoginHandlerInterface_Handle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(auth.LoginRequest))
	})
	return _c
}

func (_c *LoginHandlerInterface_Handle_Call) Return(_a0 jwt.Token, _a1 error) *LoginHandlerInterface_Handle_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LoginHandlerInterface_Handle_Call) RunAndReturn(run func(context.Context, auth.LoginRequest) (jwt.Token, error)) *LoginHandlerInterface_Handle_Call {
	_c.Call.Return(run)
	return _c
}

// NewLoginHandlerInterface creates a new instance of LoginHandlerInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLoginHandlerInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *LoginHandlerInterface {
	mock := &LoginHandlerInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
